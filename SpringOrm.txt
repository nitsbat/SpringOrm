Spring ORM is another ORM tool which combines with JPA specification or API ORM tools like hibernate and provides us easy execution of db queries.

Intro - https://www.youtube.com/watch?v=f_13gnGU_n8&list=PL0zysOflRCekeiERASkpi-crREVensZGS&index=42

Advantages of Spring ORM

1) Less Code to write
2) Easy To Test.
3) Exception handling


In ORM approach what we actually do is like for every table or enitity , we have to make a class with member variables as
column name, then ORM will map these variables to the column value. We just need to make ORM that this class should be mapped 
to this table.

In spring ORM we have HibernateTemplate Class which have all the CRUD methods (save,update,insert,get), it provides
all the functionality to perform CRUD operations in database. So we need object of HibernateTemplate.

To get the HibernateTemplate object we have to get it from the SessionFactory which is an interface and we will take
its implementation from LocalSessionFactoryBean class.
Now when we make the LocalSessionFactoryBean object we need to give three things, 
first is the DataSource which is the
databse properties, second is the Hibernate properties like cache,ddl-auto property ; 
and the third property will be Annotated classes (like mapping classes with @Entity annotation)

It is important to treat any of the CRUD operation as a transaction and follow the commit process, hence
the transactions settings needs to be done in that.
At a high level, Spring creates proxies for all the classes annotated with @Transactional,
either on the class or on any of the methods. The proxy allows the framework to
inject transactional logic before and after the running method, mainly for starting and committing the transaction.

Basically transaction is used for insert or update the data, so in CRUD operations for reading the data there is no nedd
of giving @Transactional above the read method.


Basics of Transaction in Database
It is a single unit of work which actually modifies or access the data in the database. It ensures to prevent the data
inconsistency and
Lets take an example. Suppose there is a database which stores two tables : first is passenger info and second is
payment info.
Now what happens is that for every passenger there is a requirement that the payment info related to it must also get
committed but suppose there is a scenario like when we are persisting the passenger info no problem is occurred but while
persisiting/commiting the payment info the process thrown as error and hence no record is inserted related to payment info.
At this point we have no use with the corresponding passenger data with no payment info and hence it would be great to
avoid persisitng that also. As a result we don't want the passenger info also.
Hence to avoid data inconsistency we use transactions which will allow the commit of all the work in a single unit. It it
is aborted in between any process then there will be a rollback happen. Here the error could be like the payment should be greater than
some value otherwise it will throw an Exception.
In spring JPA it is handled by @Transactional annotation.

To know how to use @Transaction watch this video - https://www.youtube.com/watch?v=95kxPSbHzVg